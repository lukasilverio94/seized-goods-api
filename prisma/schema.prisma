generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  firstName            String
  lastName             String
  email                String              @unique
  password             String
  role                 UserRole            @default(USER)
  organizationId       Int?
  organization         SocialOrganization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isVerified           Boolean             @default(false)
  refreshToken         RefreshToken[]
  resetPassToken       String?
  resetPassTokenExpiry DateTime?
}

model SocialOrganization {
  id             Int                          @id @default(autoincrement())
  name           String
  contactPerson  String
  email          String                       @unique
  phone          String
  streetName     String
  number         String
  city           String
  country        String
  zipCode        String
  qualifications String
  status         OrgStatus                    @default(PENDING)
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  categories     SocialOrganizationCategory[] // Categories of interest
  allocations    Allocation[] // Allocations received
  requests       Request[] // Item requests made by this organization
  feedbacks      Feedback[] // Feedback provided by the organization
  users          User[]
}

model SocialOrganizationCategory {
  id                   Int      @id @default(autoincrement())
  socialOrganizationId Int
  categoryId           Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  socialOrganization SocialOrganization @relation(fields: [socialOrganizationId], references: [id], onDelete: Cascade)
  category           Category           @relation(fields: [categoryId], references: [id])

  @@unique([socialOrganizationId, categoryId]) // Ensure one-to-one relation per category
}

model SeizedGood {
  id                Int           @id @default(autoincrement())
  name              String
  description       String
  value             Float
  quantity          Int           @default(1)
  availableQuantity Int           @default(0) // inventory control
  status            GoodStatus    @default(PENDING)
  condition         GoodCondition
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  images            Image[]
  categoryId        Int
  category          Category      @relation(fields: [categoryId], references: [id])
  allocations       Allocation[]
  requests          Request[]     
  feedbacks         Feedback[] 
}

model Image {
  id           Int      @id @default(autoincrement())
  url          String // File path or URL to the image
  altText      String? // Optional description for accessibility
  seizedGoodId Int
  createdAt    DateTime @default(now())

  seizedGood SeizedGood @relation(fields: [seizedGoodId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int                          @id @default(autoincrement())
  name          String                       @unique
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  goods         SeizedGood[] // Goods in this category
  organizations SocialOrganizationCategory[] // Organizations interested in this category
}

model Request {
  id             Int           @id @default(autoincrement())
  organizationId Int
  seizedGoodId   Int
  quantity       Int
  purpose        String // Why the org needs this good
  impactEstimate String? // Expected social or environmental impact
  status         RequestStatus @default(PENDING) // Request lifecycle
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization SocialOrganization @relation(fields: [organizationId], references: [id])
  seizedGood   SeizedGood         @relation(fields: [seizedGoodId], references: [id], onDelete: Cascade)
}

model Feedback {
  id             Int      @id @default(autoincrement())
  organizationId Int
  seizedGoodId   Int
  testimonial    String?
  impactStats    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization SocialOrganization @relation(fields: [organizationId], references: [id])
  seizedGood   SeizedGood         @relation(fields: [seizedGoodId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(uuid())
  userName  String
  userEmail String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Allocation {
  id             Int      @id @default(autoincrement())
  seizedGoodId   Int
  organizationId Int
  allocatedAt    DateTime @default(now())
  purpose        String // description of the purpose for the items applied
  createdAt      DateTime @default(now())

  seizedGood         SeizedGood         @relation(fields: [seizedGoodId], references: [id])
  socialOrganization SocialOrganization @relation(fields: [organizationId], references: [id])
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String
  userId      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum GoodStatus {
  PENDING
  ALLOCATED
  RECEIVED
  DESTROYED
}

enum GoodCondition {
  USED
  REFURBISHED
  NEW
  GOOD
}

enum OrgStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}
