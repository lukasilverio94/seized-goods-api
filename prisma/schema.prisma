generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  password          String
  role              UserRole           @default(USER)
  organizationId    Int?               
  organization      SocialOrganization? @relation(fields: [organizationId], references: [id], onDelete: Cascade) // Optional relation
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  refreshToken      RefreshToken[]
}

model SocialOrganization {
  id                Int                @id @default(autoincrement())
  name              String
  contactPerson     String
  email             String
  phone             String
  address           String
  qualifications    String
  status            OrgStatus          @default(APPROVED) // Approval status
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  categories        SocialOrganizationCategory[] // Categories of interest
  allocations       Allocation[]       // Allocations received
  requests          Request[]          // Item requests made by this organization
  feedbacks         Feedback[]         // Feedback provided by the organization
  users             User[]             

}
model SocialOrganizationCategory {
  id                Int                @id @default(autoincrement())
  socialOrganizationId Int
  categoryId        Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  socialOrganization SocialOrganization @relation(fields: [socialOrganizationId], references: [id], onDelete: Cascade)
  category          Category           @relation(fields: [categoryId], references: [id])

  @@unique([socialOrganizationId, categoryId]) // Ensure one-to-one relation per category
}


model SeizedGood {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  value       Float
  quantity    Int        @default(1)
  availableQuantity Int  @default(0) // inventory control
  status      GoodStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  images      Image[]
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  allocations Allocation[]
  requests    Request[]  // Requests tied to this seized good
  feedbacks   Feedback[] // Feedback on the good's usage
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String   // File path or URL to the image
  altText     String?  // Optional description for accessibility
  seizedGoodId Int
  createdAt   DateTime @default(now())

  seizedGood SeizedGood @relation(fields: [seizedGoodId], references: [id], onDelete: Cascade)
}

model Category {
  id              Int                          @id @default(autoincrement())
  name            String                       @unique
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  goods           SeizedGood[]                // Goods in this category
  organizations   SocialOrganizationCategory[] // Organizations interested in this category
}


model Request {
  id                Int                @id @default(autoincrement())
  organizationId    Int
  seizedGoodId      Int
  quantity          Int
  purpose           String             // Why the org needs this good
  impactEstimate    String?            // Expected social or environmental impact
  status            RequestStatus      @default(PENDING) // Request lifecycle
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  organization      SocialOrganization @relation(fields: [organizationId], references: [id])
  seizedGood        SeizedGood         @relation(fields: [seizedGoodId], references: [id])
}

model Feedback {
  id                Int                @id @default(autoincrement())
  organizationId    Int
  seizedGoodId      Int
  testimonial       String?            // Testimonials or success stories
  photos            String[]           // Paths to uploaded photos
  impactStats       String?            // Usage or social impact stats
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  organization      SocialOrganization @relation(fields: [organizationId], references: [id])
  seizedGood        SeizedGood         @relation(fields: [seizedGoodId], references: [id])
}

model Allocation {
  id                Int                @id @default(autoincrement())
  seizedGoodId      Int
  organizationId    Int
  allocatedAt       DateTime           @default(now())
  purpose           String             // description of the purpose for the items applied
  createdAt         DateTime           @default(now())

  seizedGood        SeizedGood         @relation(fields: [seizedGoodId], references: [id])
  socialOrganization SocialOrganization @relation(fields: [organizationId], references: [id])
}


model RefreshToken {
  id                String             @id @default(uuid())
  hashedToken       String
  userId            String
  revoked           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum GoodStatus {
  PENDING
  ALLOCATED
  RECEIVED
  DESTROYED
}

enum OrgStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER 
  ADMIN 
}
